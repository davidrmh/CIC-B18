install.packages("prettydoc")
install.packages("knitr}")
install.packages("knitr")
install.packages("stringr")
install.packages("glue")
install.packages("stringr")
install.packages("knitr")
install.packages("prettydoc")
install.packages("rmarkdown")
install.packages("htmltools")
install.packages("stringr")
install.packages("htmltools")
install.packages("htmltools")
version
R
install.packages("ggplot2")
install.packages("tsne")
library(tsne)
colors = rainbow(length(unique(iris$Species)))
names(colors) = unique(iris$Species)
ecb = function(x,y){ plot(x,t=
'
n
'
); text(x,labels=iris$Species, col=colors[iris$Species]) }
tsne_iris = tsne(iris[,1:4], epoch_callback = ecb, perplexity=50)
ecb
ecb = function(x,y){ plot(x,t='n'); text(x,labels=iris$Species,col=colors[iris$Species])}
tsne_iris = tsne(iris[,1:4], epoch_callback = ecb, perplexity=50)
ls
setwd("~/Documents/CIC-B18/machine-learning/kaggle-house-prices/")
dir()
entrenamiento<-read.csv("train.csv")
View(entrenamiento)
plot(entrenamiento$MSSubClass,entrenamiento$SalePrice)
|class(entrenamiento$MSZoning)
class(entrenamiento$MSZoning)
head(entrenamiento$MSZoning)
length(unique(entrenamiento$MSZoning))
unique(entrenamiento$MSZoning)
plot(entrenamiento$MSZoning,entrenamiento$SalePrice,col=entrenamiento$MSZoning)
plot(entrenamiento$MSZoning,entrenamiento$SalePrice,col=entrenamiento$MSZoning,type="p")
plot(entrenamiento$MSZoning,entrenamiento$SalePrice)
library(ggplot2)
g<-ggplot(data=entrenamiento,mapping=aes(x=MSZoning,y=SalePrice))
g + geom_point()
g + geom_point()
g<-ggplot(data=entrenamiento)
g + geom_point(mapping = aes(x=LotFrontage,y=SalePrice))
g + geom_point(mapping = aes(x=LotFrontage,y=log(SalePrice)))
g + geom_point(mapping = aes(x=LotArea,y=SalePrice))
g + geom_point(mapping = aes(x=LotArea,y=SalePrice),col=MSZoning)
g + geom_point(mapping = aes(x=LotArea,y=SalePrice,col=MSZoning))
levels(entrenamiento$Alley)
g + geom_point(mapping = aes(x=LotShape,y=SalePrice,col=Street))
summary(entrenamiento)
g + geom_point(mapping = aes(x=Street,y=SalePrice,col=Street))
levels(unique(entrenamiento$HouseStyle))
g + geom_point(mapping = aes(x=HouseStyle,y=SalePrice,col=YearBuilt))
g + geom_point(mapping = aes(x=HouseStyle,y=SalePrice,col=as.factor(YearBuilt)))
g + geom_point(mapping = aes(x=YearBuilt,y=SalePrice,col=HouseStyle))
g + geom_point(mapping = aes(x=YearBuilt,y=log(SalePrice),col=HouseStyle))
g + geom_point(mapping = aes(x=YearBuilt,y=SalePrice,col=HouseStyle))
g + geom_point(mapping = aes(x=YearBuilt,y=SalePrice,col=RoofMatl))
g + geom_point(mapping = aes(x=RoofMatl,y=SalePrice))
g + geom_point(mapping = aes(x=YearBuilt,y=SalePrice,col=HouseStyle))
g + geom_point(mapping = aes(x=YearBuilt,y=SalePrice))
g + geom_point(mapping = aes(x=log(YearBuilt),y=SalePrice))
g + geom_point(mapping = aes(x=log(YearBuilt),y=SalePrice,col=Neighborhood))
g + geom_point(mapping = aes(x=Neighborhood,y=SalePrice))
g + geom_point(mapping = aes(x=Neighborhood,y=SalePrice,col=Condition1))
g + geom_point(mapping = aes(x=Neighborhood,y=SalePrice,col=Condition2))
g + geom_point(mapping = aes(x=Neighborhood,y=SalePrice,col=BldgType))
g + geom_point(mapping = aes(x=Condition1,y=SalePrice,col=BldgType))
g + geom_point(mapping = aes(x=Condition1,y=SalePrice))
g + geom_point(mapping = aes(x=BldgType,y=SalePrice))
g + geom_point(mapping = aes(x=HouseType,y=SalePrice))
g + geom_point(mapping = aes(x=HouseStyle,y=SalePrice))
g + geom_point(mapping = aes(x=OverallQual,y=SalePrice))
g + geom_point(mapping = aes(x=LotArea,y=SalePrice,col=))
g + geom_point(mapping = aes(x=LotArea,y=SalePrice))
g + geom_point(mapping = aes(x=LotArea,y=SalePrice,col=YearBuilt))
g + geom_point(mapping = aes(x=OverallCond,y=SalePrice))
g + geom_point(mapping = aes(x=OverallCond,y=SalePrice,col=as.factor(OverallQual)))
g + geom_point(mapping = aes(x=OverallCond,y=OverallQual))
g + geom_point(mapping = aes(x=RoofMatl,y=OverallQual))
g + geom_point(mapping = aes(x=RoofMatl,y=SalePrice))
g + geom_point(mapping = aes(x=RoofStyle,y=SalePrice))
g + geom_point(mapping = aes(x=RoofStyle,y=SalePrice))
g + geom_point(mapping = aes(x=Exterior1st,y=SalePrice))
g + geom_point(mapping = aes(x=Exterior2nd,y=SalePrice))
g + geom_point(mapping = aes(x=MasVnrType,y=SalePrice))
g + geom_point(mapping = aes(x=MasVnrArea,y=SalePrice))
g + geom_point(mapping = aes(x=ExterQual,y=SalePrice))
g + geom_point(mapping = aes(x=ExterCond,y=SalePrice))
g + geom_point(mapping = aes(x=Foundation,y=SalePrice))
g + geom_point(mapping = aes(x=Heating,y=SalePrice))
g + geom_point(mapping = aes(x=Electrical,y=SalePrice))
g + geom_point(mapping = aes(x=Electrical,y=SalePrice,col=YearBuilt))
g + geom_point(mapping = aes(x=Electrical,y=jitter(SalePrice),col=YearBuilt))
g + geom_point(mapping = aes(x=Electrical,y=SalePrice,col=YearBuilt))
g + geom_point(mapping = aes(x=Bedroom,y=SalePrice,col=YearBuilt))
names(entrenamiento)
g + geom_point(mapping = aes(x=KitchenQual,y=SalePrice,col=YearBuilt))
g + geom_point(mapping = aes(x=Functional,y=SalePrice,col=YearBuilt))
g + geom_point(mapping = aes(x=GarageType,y=SalePrice,col=YearBuilt))
prueba<-read.csv("test.csv")
names(prueba)
prueba$Id
benchmark<-read.csv("sample_submission.csv")
names(benchmark)
sum(prueba$Id - benchmark$Id)
g + geom_point(mapping = aes(x=MiscFeature,y=SalePrice,col=YearBuilt))
g + geom_point(mapping = aes(x=MiscVal,y=SalePrice,col=YearBuilt))
g + geom_point(mapping = aes(x=SaleType,y=SalePrice,col=YearBuilt))
g + geom_point(mapping = aes(x=SaleCondition,y=SalePrice,col=YearBuilt))
g + geom_point(mapping = aes(x=YrSold,y=SalePrice,col=YearBuilt))
g + geom_point(mapping = aes(x=MoSold,y=SalePrice,col=YearBuilt))
modelo<-lm(SalePrice ~ YearBuilt + OverallQual + LotArea)
modelo<-lm(SalePrice ~ YearBuilt + OverallQual + LotArea,data=entrenamiento)
plot(modelo)
modelo<-lm(SalePrice ~ I(YearBuilt*YearBuilt) + OverallQual + LotArea,data=entrenamiento)
plot(modelo)
prueba
predicciones <- predict(modelo,data=prueba)
min(predicciones)
plot(predicciones)
plot(predicciones,benchmark$SalePrice)
length(predicciones)
length(benchmark$SalePrice)
length(prueba$Id)
names(predicciones)
prueba$Id
length(prueba$Id   )
predicciones<-predict(modelo,newdata=prueba)
length(predicciones)
plot(predicciones,benchmark$SalePrice)
plot(predicciones-benchmark$SalePrice)
which(predicciones<0)
summary(modelo)
modelo<-lm(SalePrice ~ I(YearBuilt*YearBuilt) + OverallQual + LotArea - 1,data=entrenamiento)
predicciones<-predict(modelo,newdata=prueba)
min(predicciones)
modelo<-lm(SalePrice ~ I(YearBuilt*YearBuilt) + OverallQual + LotArea ,data=entrenamiento)
predicciones<-predict(modelo,newdata=prueba)
min(predicciones)
min(benchmark)
min(benchmark$SalePrice)
rmse<-function(predicciones,benchmark){
#Para asegurarnos que se tengan predicciones con valores positivos
#cambiamos las predicciones negativas por el valor promedio de las predicciones
promedio<-mean(predicciones)
indicesNegativos<-which(predicciones<=0)
predicciones[indicesNegativos]=promedio
#Se calcula el rmse
logPredicciones<-log(predicciones)
logBenchmakr<-log(benchmark)
diferencias<-logPredicciones - logBenchmakr
error<-sqrt(mean(diferencias^2))
return (error)
}
rmse(predicciones,benchmark$SalePrice)
modelo<-lm(SalePrice ~ YearBuilt + OverallQual + LotArea ,data=entrenamiento)
predicciones<-predict(modelo,newdata=prueba)
rmse(predicciones,benchmark$SalePrice)
modelo<-lm(SalePrice ~ as.factor(YearBuilt) + OverallQual + LotArea ,data=entrenamiento)
predicciones<-predict(modelo,newdata=prueba)
modelo<-lm(SalePrice ~ I(YearBuilt*YearBuilt) + OverallQual + LotArea + SaleType ,data=entrenamiento)
predicciones<-predict(modelo,newdata=prueba)
rmse(predicciones,benchmark$SalePrice)
min(predicciones)
g + geom_point(mapping = (x=GarageCars,y=SalePrice))
g + geom_point(mapping = aes(x=GarageCars,y=SalePrice))
modelo<-lm(SalePrice ~ I(YearBuilt*YearBuilt) + OverallQual + LotArea + GarageCars ,data=entrenamiento)
predicciones<-predict(modelo,newdata=prueba)
rmse(predicciones,benchmark$SalePrice)
predicciones
which(predicciones==NA)
plot(predicciones)
mean(predicciones)
is.numeric(predicciones)
benchmark$SalePrice
is.numeric(benchmark$SalePrice)
is.numeric(predicciones)
predicciones - benchmark$SalePrice
sum(predicciones - benchmark$SalePrice)
modelo
summary(modelo)
modelo<-lm(SalePrice ~ YearBuilt + OverallQual + LotArea + GarageCars ,data=entrenamiento)
predicciones<-predict(modelo,newdata=prueba)
which(predicciones==NA)
sum(predicciones)
length(predicciones)
plot(predicciones)
plot(benchmark$SalePrice,col="red")
points(predicciones)
View(entrenamiento$GarageCars)
summary(entrenamiento$GarageCars)
summary(entrenamiento$YearBuilt)
g + geom_point(mapping = aes(x=YearBuilt,y=SalePrice))
g + geom_point(mapping = aes(x=YearBuilt,y=SalePrice)) + geom_smooth()
g + geom_point(mapping = aes(x=YearBuilt,y=SalePrice)) + geom_smooth(mapping = aes(x=YearBuilt,y=SalePrice))
which(predicciones <=0)
i=which(predicciones <=0)
mean(predicciones)
length(predicciones)
for(i in 1:length(predicciones)){if(! is.numeric(predicciones[i])) i }
for(i in 1:length(predicciones)){if( is.numeric(predicciones[i])) i }
for(i in 1:length(predicciones)){if( is.numeric(predicciones[i])) print(i) }
for(i in 1:length(predicciones)){if(! is.numeric(predicciones[i])) print (i) }
rmse<-function(predicciones,benchmark){
#Para asegurarnos que se tengan predicciones con valores positivos
#cambiamos las predicciones negativas por el valor promedio de las predicciones
promedio<-mean(predicciones)
indicesNegativos<-which(predicciones<=0)
predicciones[indicesNegativos]=promedio
#Se calcula el rmse
logPredicciones<-log(predicciones)
logBenchmakr<-log(benchmark)
diferencias<-logPredicciones - logBenchmark
error<-sqrt(mean(diferencias^2))
return (error)
}
mean(predicciones)
View(predicciones)
sort(predicciones)
is.na(predicciones)
sum(is.na(predicciones))
which(is.na(predicciones))
predicciones[1117]
prueba[1117,]
median(predicciones)
rmse<-function(predicciones,benchmark){
#Se quitan los NA
indicesNA<-which(is.na(predicciones))
predicciones<-predicciones[-indicesNA]
#Para asegurarnos que se tengan predicciones con valores positivos
#cambiamos las predicciones negativas por el valor promedio de las predicciones
promedio<-mean(predicciones)
indicesNegativos<-which(predicciones<=0)
predicciones[indicesNegativos]=promedio
#Se sustituyen los NA con el promedio
predicciones[indicesNA] = promedio
#Se calcula el rmse
logPredicciones<-log(predicciones)
logBenchmakr<-log(benchmark)
diferencias<-logPredicciones - logBenchmark
error<-sqrt(mean(diferencias^2))
return (error)
}
modelo<-lm(SalePrice ~ YearBuilt + OverallQual + LotArea + GarageCars ,data=entrenamiento)
predicciones<-predict(modelo,newdata=prueba)
rmse(predicciones,benchmark$SalePrice)
rmse<-function(predicciones,benchmark){
#Se quitan los NA
indicesNA<-which(is.na(predicciones))
predicciones<-predicciones[-indicesNA]
#Para asegurarnos que se tengan predicciones con valores positivos
#cambiamos las predicciones negativas por el valor promedio de las predicciones
promedio<-mean(predicciones)
indicesNegativos<-which(predicciones<=0)
predicciones[indicesNegativos]=promedio
#Se sustituyen los NA con el promedio
predicciones[indicesNA] = promedio
#Se calcula el rmse
logPredicciones<-log(predicciones)
logBenchmark<-log(benchmark)
diferencias<-logPredicciones - logBenchmark
error<-sqrt(mean(diferencias^2))
return (error)
}
rmse(predicciones,benchmark$SalePrice)
#Se quitan los NA
indicesNA<-which(is.na(predicciones))
indicesNA
predicciones<-predicciones[-indicesNA]
#Para asegurarnos que se tengan predicciones con valores positivos
#cambiamos las predicciones negativas por el valor promedio de las predicciones
promedio<-mean(predicciones)
rmse<-function(predicciones,benchmark){
#Se calcula el promedio sin incluir los NA
indicesNA<-which(is.na(predicciones))
promedio<-mean(predicciones[-indicesNA])
#Para asegurarnos que se tengan predicciones con valores positivos
#cambiamos las predicciones negativas por el valor promedio de las predicciones
indicesNegativos<-which(predicciones<=0)
predicciones[indicesNegativos]=promedio
#Se sustituyen los NA con el promedio
predicciones[indicesNA] = promedio
#Se calcula el rmse
logPredicciones<-log(predicciones)
logBenchmark<-log(benchmark)
diferencias<-logPredicciones - logBenchmark
error<-sqrt(mean(diferencias^2))
return (error)
}
rmse(predicciones,benchmark$SalePrice)
#Se calcula el promedio sin incluir los NA
indicesNA<-which(is.na(predicciones))
promedio<-mean(predicciones[-indicesNA])
promedio
predicciones
which(is.na(predicciones))
length(predicciones)
predicciones<-predict(modelo,newdata=prueba)
predicciones
#Se calcula el promedio sin incluir los NA
indicesNA<-which(is.na(predicciones))
promedio<-mean(predicciones[-indicesNA])
#Para asegurarnos que se tengan predicciones con valores positivos
#cambiamos las predicciones negativas por el valor promedio de las predicciones
indicesNegativos<-which(predicciones<=0)
predicciones[indicesNegativos]=promedio
#Se sustituyen los NA con el promedio
predicciones[indicesNA] = promedio
rmse(predicciones,benchmark$SalePrice)
